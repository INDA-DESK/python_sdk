"""
    INDA DESK - INtelligent Data Analysis for document parsing

     # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is greater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.   Financial documents, invoices, taxes, and certifications are common documents  normally stored as Portable Document Format (PDF). Often such documents are used as financial approval or as input for next bureaucratic steps. These operations are commonly made by human beings where they should read the documents and make decision based on the information inside the document.      INDA DESK was born to automatize the operations of information extraction from commonly used financial documents  such as *single document of contribution regularity* (DURC), *single document of fiscal regularity* (DURF) or *visure camerali*.  The automatization provides scalability and the speeding up of the processes related with such documents.   The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is <span style=\"color:blue\">https<area>://api.inda.ai/desk/v1/</span>. We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.    # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: info@intervieweb.it
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from inda_desk.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from inda_desk.exceptions import ApiAttributeError


def lazy_import():
    from inda_desk.model.share_capital import ShareCapital
    globals()['ShareCapital'] = ShareCapital


class OptionalVisuraDoc(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'filename': (str,),  # noqa: E501
            'visura_type': (str,),  # noqa: E501
            'business_name': (str,),  # noqa: E501
            'address': (str,),  # noqa: E501
            'pec_address': (str,),  # noqa: E501
            'rea_number': (str,),  # noqa: E501
            'social_security_number': (str,),  # noqa: E501
            'vat_number': (str,),  # noqa: E501
            'lei_code': (str,),  # noqa: E501
            'legal_form': (str,),  # noqa: E501
            'foundation_date': (str,),  # noqa: E501
            'registration_date': (str,),  # noqa: E501
            'last_protocol_date': (str,),  # noqa: E501
            'prime_president': (str,),  # noqa: E501
            'activity_status': (str,),  # noqa: E501
            'starting_activity_date': (str,),  # noqa: E501
            'main_activity': (str,),  # noqa: E501
            'ateco_code': (str,),  # noqa: E501
            'nace_code': (str,),  # noqa: E501
            'import_export_activity': (str,),  # noqa: E501
            'network_contract': (str,),  # noqa: E501
            'registries_roles_licenses': (str,),  # noqa: E501
            'environmental_registers': (str,),  # noqa: E501
            'share_capital': (str,),  # noqa: E501
            'employees_at_reference_date': (str,),  # noqa: E501
            'ri_documents': (str,),  # noqa: E501
            'partners': (str,),  # noqa: E501
            'administrators': (str,),  # noqa: E501
            'office_holders': (str,),  # noqa: E501
            'local_units': (str,),  # noqa: E501
            'practices_sent_in_the_last_twelve_months': (str,),  # noqa: E501
            'soa_certifications': (str,),  # noqa: E501
            'transfer_of_shares': (str,),  # noqa: E501
            'headquarters_transfers': (str,),  # noqa: E501
            'equity_investments': (str,),  # noqa: E501
            'dossier': (str,),  # noqa: E501
            'statute': (str,),  # noqa: E501
            'other_acts': (str,),  # noqa: E501
            'quality_certifications': (str,),  # noqa: E501
            'balance': (str,),  # noqa: E501
            'share_capital_in_euro': (ShareCapital,),  # noqa: E501
            'administrator': ([str],),  # noqa: E501
            'president': ([str],),  # noqa: E501
            'counselor': ([str],),  # noqa: E501
            'ceo': ([str],),  # noqa: E501
            'mayor': ([str],),  # noqa: E501
            'chairman_statutory_auditor': ([str],),  # noqa: E501
            'alternate_mayor': ([str],),  # noqa: E501
            'partner': ([str],),  # noqa: E501
            'unique_partner': ([str],),  # noqa: E501
            'propriety': ([str],),  # noqa: E501
            'vice_president': ([str],),  # noqa: E501
            'atecori2007_classifications': ([str],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'filename': 'Filename',  # noqa: E501
        'visura_type': 'VisuraType',  # noqa: E501
        'business_name': 'BusinessName',  # noqa: E501
        'address': 'Address',  # noqa: E501
        'pec_address': 'PECAddress',  # noqa: E501
        'rea_number': 'REANumber',  # noqa: E501
        'social_security_number': 'SocialSecurityNumber',  # noqa: E501
        'vat_number': 'VATNumber',  # noqa: E501
        'lei_code': 'LEICode',  # noqa: E501
        'legal_form': 'LegalForm',  # noqa: E501
        'foundation_date': 'FoundationDate',  # noqa: E501
        'registration_date': 'RegistrationDate',  # noqa: E501
        'last_protocol_date': 'LastProtocolDate',  # noqa: E501
        'prime_president': 'PrimePresident',  # noqa: E501
        'activity_status': 'ActivityStatus',  # noqa: E501
        'starting_activity_date': 'StartingActivityDate',  # noqa: E501
        'main_activity': 'MainActivity',  # noqa: E501
        'ateco_code': 'ATECOCode',  # noqa: E501
        'nace_code': 'NACECode',  # noqa: E501
        'import_export_activity': 'ImportExportActivity',  # noqa: E501
        'network_contract': 'NetworkContract',  # noqa: E501
        'registries_roles_licenses': 'RegistriesRolesLicenses',  # noqa: E501
        'environmental_registers': 'EnvironmentalRegisters',  # noqa: E501
        'share_capital': 'ShareCapital',  # noqa: E501
        'employees_at_reference_date': 'EmployeesAtReferenceDate',  # noqa: E501
        'ri_documents': 'RiDocuments',  # noqa: E501
        'partners': 'Partners',  # noqa: E501
        'administrators': 'Administrators',  # noqa: E501
        'office_holders': 'OfficeHolders',  # noqa: E501
        'local_units': 'LocalUnits',  # noqa: E501
        'practices_sent_in_the_last_twelve_months': 'PracticesSentInTheLastTwelveMonths',  # noqa: E501
        'soa_certifications': 'SOACertifications',  # noqa: E501
        'transfer_of_shares': 'TransferOfShares',  # noqa: E501
        'headquarters_transfers': 'HeadquartersTransfers',  # noqa: E501
        'equity_investments': 'EquityInvestments',  # noqa: E501
        'dossier': 'Dossier',  # noqa: E501
        'statute': 'Statute',  # noqa: E501
        'other_acts': 'OtherActs',  # noqa: E501
        'quality_certifications': 'QualityCertifications',  # noqa: E501
        'balance': 'Balance',  # noqa: E501
        'share_capital_in_euro': 'ShareCapitalInEuro',  # noqa: E501
        'administrator': 'Administrator',  # noqa: E501
        'president': 'President',  # noqa: E501
        'counselor': 'Counselor',  # noqa: E501
        'ceo': 'CEO',  # noqa: E501
        'mayor': 'Mayor',  # noqa: E501
        'chairman_statutory_auditor': 'ChairmanStatutoryAuditor',  # noqa: E501
        'alternate_mayor': 'AlternateMayor',  # noqa: E501
        'partner': 'Partner',  # noqa: E501
        'unique_partner': 'UniquePartner',  # noqa: E501
        'propriety': 'Propriety',  # noqa: E501
        'vice_president': 'VicePresident',  # noqa: E501
        'atecori2007_classifications': 'ATECORI2007Classifications',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """OptionalVisuraDoc - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            filename (str): Filename. [optional]  # noqa: E501
            visura_type (str): Type of visura: Visura Ordinaria, Visura di Evasione or Visura Storica. [optional]  # noqa: E501
            business_name (str): Business name of the company. [optional]  # noqa: E501
            address (str): Address. [optional]  # noqa: E501
            pec_address (str): PEC address. [optional]  # noqa: E501
            rea_number (str): REA number. [optional]  # noqa: E501
            social_security_number (str): Italian social security number. [optional]  # noqa: E501
            vat_number (str): VAT code. [optional]  # noqa: E501
            lei_code (str): LEI code. [optional]  # noqa: E501
            legal_form (str): Type of society. [optional]  # noqa: E501
            foundation_date (str): Foundation date. [optional]  # noqa: E501
            registration_date (str): Registration date. [optional]  # noqa: E501
            last_protocol_date (str): Date of the last protocol. [optional]  # noqa: E501
            prime_president (str): President. [optional]  # noqa: E501
            activity_status (str): Activity status. [optional]  # noqa: E501
            starting_activity_date (str): Activity starting date. [optional]  # noqa: E501
            main_activity (str): Main activity. [optional]  # noqa: E501
            ateco_code (str): ATECO code. [optional]  # noqa: E501
            nace_code (str): NACE code. [optional]  # noqa: E501
            import_export_activity (str): Import export activity. [optional]  # noqa: E501
            network_contract (str): Network contract. [optional]  # noqa: E501
            registries_roles_licenses (str): Registries, roles and licence. [optional]  # noqa: E501
            environmental_registers (str): Environmental Registries. [optional]  # noqa: E501
            share_capital (str): Share Capital. [optional]  # noqa: E501
            employees_at_reference_date (str): Employees at reference date. [optional]  # noqa: E501
            ri_documents (str): RI documents. [optional]  # noqa: E501
            partners (str): Partners. [optional]  # noqa: E501
            administrators (str): Administrators. [optional]  # noqa: E501
            office_holders (str): Office holders. [optional]  # noqa: E501
            local_units (str): Local units. [optional]  # noqa: E501
            practices_sent_in_the_last_twelve_months (str): Number of practices sent in the last twelve months. [optional]  # noqa: E501
            soa_certifications (str): SOA certification. [optional]  # noqa: E501
            transfer_of_shares (str): Transfer of shares. [optional]  # noqa: E501
            headquarters_transfers (str): Transfer of headquarter. [optional]  # noqa: E501
            equity_investments (str): Equity investments. [optional]  # noqa: E501
            dossier (str): Dossier. [optional]  # noqa: E501
            statute (str): Statute. [optional]  # noqa: E501
            other_acts (str): Other acts. [optional]  # noqa: E501
            quality_certifications (str): Quality certification. [optional]  # noqa: E501
            balance (str): Balance. [optional]  # noqa: E501
            share_capital_in_euro (ShareCapital): [optional]  # noqa: E501
            administrator ([str]): Administrator. [optional]  # noqa: E501
            president ([str]): President. [optional]  # noqa: E501
            counselor ([str]): Counselor. [optional]  # noqa: E501
            ceo ([str]): CEO. [optional]  # noqa: E501
            mayor ([str]): Mayor. [optional]  # noqa: E501
            chairman_statutory_auditor ([str]): Chairman statutory auditor. [optional]  # noqa: E501
            alternate_mayor ([str]): Alternate mayor. [optional]  # noqa: E501
            partner ([str]): Partner. [optional]  # noqa: E501
            unique_partner ([str]): Unique Partner. [optional]  # noqa: E501
            propriety ([str]): Propriety. [optional]  # noqa: E501
            vice_president ([str]): Vice president. [optional]  # noqa: E501
            atecori2007_classifications ([str]): ATECO code classification (list and description). [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """OptionalVisuraDoc - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            filename (str): Filename. [optional]  # noqa: E501
            visura_type (str): Type of visura: Visura Ordinaria, Visura di Evasione or Visura Storica. [optional]  # noqa: E501
            business_name (str): Business name of the company. [optional]  # noqa: E501
            address (str): Address. [optional]  # noqa: E501
            pec_address (str): PEC address. [optional]  # noqa: E501
            rea_number (str): REA number. [optional]  # noqa: E501
            social_security_number (str): Italian social security number. [optional]  # noqa: E501
            vat_number (str): VAT code. [optional]  # noqa: E501
            lei_code (str): LEI code. [optional]  # noqa: E501
            legal_form (str): Type of society. [optional]  # noqa: E501
            foundation_date (str): Foundation date. [optional]  # noqa: E501
            registration_date (str): Registration date. [optional]  # noqa: E501
            last_protocol_date (str): Date of the last protocol. [optional]  # noqa: E501
            prime_president (str): President. [optional]  # noqa: E501
            activity_status (str): Activity status. [optional]  # noqa: E501
            starting_activity_date (str): Activity starting date. [optional]  # noqa: E501
            main_activity (str): Main activity. [optional]  # noqa: E501
            ateco_code (str): ATECO code. [optional]  # noqa: E501
            nace_code (str): NACE code. [optional]  # noqa: E501
            import_export_activity (str): Import export activity. [optional]  # noqa: E501
            network_contract (str): Network contract. [optional]  # noqa: E501
            registries_roles_licenses (str): Registries, roles and licence. [optional]  # noqa: E501
            environmental_registers (str): Environmental Registries. [optional]  # noqa: E501
            share_capital (str): Share Capital. [optional]  # noqa: E501
            employees_at_reference_date (str): Employees at reference date. [optional]  # noqa: E501
            ri_documents (str): RI documents. [optional]  # noqa: E501
            partners (str): Partners. [optional]  # noqa: E501
            administrators (str): Administrators. [optional]  # noqa: E501
            office_holders (str): Office holders. [optional]  # noqa: E501
            local_units (str): Local units. [optional]  # noqa: E501
            practices_sent_in_the_last_twelve_months (str): Number of practices sent in the last twelve months. [optional]  # noqa: E501
            soa_certifications (str): SOA certification. [optional]  # noqa: E501
            transfer_of_shares (str): Transfer of shares. [optional]  # noqa: E501
            headquarters_transfers (str): Transfer of headquarter. [optional]  # noqa: E501
            equity_investments (str): Equity investments. [optional]  # noqa: E501
            dossier (str): Dossier. [optional]  # noqa: E501
            statute (str): Statute. [optional]  # noqa: E501
            other_acts (str): Other acts. [optional]  # noqa: E501
            quality_certifications (str): Quality certification. [optional]  # noqa: E501
            balance (str): Balance. [optional]  # noqa: E501
            share_capital_in_euro (ShareCapital): [optional]  # noqa: E501
            administrator ([str]): Administrator. [optional]  # noqa: E501
            president ([str]): President. [optional]  # noqa: E501
            counselor ([str]): Counselor. [optional]  # noqa: E501
            ceo ([str]): CEO. [optional]  # noqa: E501
            mayor ([str]): Mayor. [optional]  # noqa: E501
            chairman_statutory_auditor ([str]): Chairman statutory auditor. [optional]  # noqa: E501
            alternate_mayor ([str]): Alternate mayor. [optional]  # noqa: E501
            partner ([str]): Partner. [optional]  # noqa: E501
            unique_partner ([str]): Unique Partner. [optional]  # noqa: E501
            propriety ([str]): Propriety. [optional]  # noqa: E501
            vice_president ([str]): Vice president. [optional]  # noqa: E501
            atecori2007_classifications ([str]): ATECO code classification (list and description). [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
